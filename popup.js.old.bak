/*
In process of editing to run as single injection for each submission.
Single button is new intent.

User should:
	1. Enter the student ID to submit into the popup.
	2. Click the submit id button.
	3. At this time, the script will check to see if a script has already been injected, and inject it if not.
		3.1 The injected script will then wait for a message from popup.js that will include a student id.
			3.1.1 When the script receives this message from popup.js, it will:
				a. click the current sign up Option
				b. enter that student id in the student id field (barcode I think?)
				c. enter the teacher name in the teacher field
				(d. eventually also click submit, but lets just make this much work first lol)
		3.1. Initialize the studentID variable in popup.js OR update it if it is already initialized.
		3.2  Initialize the teacher or update it if it already exists.
		3.3. Send a message to the injected stcript content to update the page.


I think more needs to happen, but this is what I've got so far.
I also want to build in console.log messages to be able to debug.


Could I actually just do everything from here? do I have to "inject" a script??
*/

//First, get a live reference to the textbox from the popup.html.
const studentIdTextboxInPopup = document.getElementById('studentIdTextboxInPopup');

//Next, add a listener to respond to someone clicking the button with id: submitIDButton.
document.getElementById('submitIDButton').addEventListener('click', setStudentID);

//Now, lets declare the function that will happen when the listener hears the button click.
function setStudentID () {

	//We'll set a variable to equal the text from that textbox in the popup.
	let currentStudentID = studentIdTextboxInPopup.value;

	//Let's also print that current value to the console so we can check if needed.
	console.log("the currentStudentID has been set to %s", currentStudentID);

}


//Lets see if we can read that variable outside of that function above:
console.log("This is an attempt to read the currentStudentID outside of it's function: %s", currentStudentID);
//Okay, it definitely does NOT read that variable outside of that function. That was kind of expected.
//What if I make it a var?



//OLD BELOW, COMMENT OUT LATER//
/*
function injectTheScript() {
  // Get the current active tab to do script stuff with.
  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
    // In that active tab, do script stuff.
    chrome.scripting.executeScript({
      target: { tabId: tabs[0].id },
      // Check to see if the script has already been injected before injecting.
      function: () => {

        // Do this by checking to see if we've set the indicator variable

        if (typeof window.scriptInjected === 'undefined') {

          // If we have not, we're going to inject, so set the indicator now.
          // That way if we check again later we'll know we've injected.
          window.scriptInjected = true;


          // Cool, now that we have set that indicator, let's go ahead and declare the teacherName.
          // This we'll set as a const though becuase it will not change.
          const teacherName = document.querySelector('input[name="data[teacher1]"]');

          //  This is where we'll put the code that will run when the openNextSignUpButton is clicked
          //  We'll move it here from down below.
          if (typeof activeTab === 'undefined') {

            // If we have not, we are going to get the active tab which isn't going to change.
            const activeTab = document.querySelector('.tab-pane.active');

            // We are also going to find the currently available "Sign Up" button within the active tab.
            // We are going to make this a let because it could be different on successive runs (I think)
            let signUpButton = activeTab.querySelector('.btn.btn-danger.btn-sign-up');

            // Now we can work with that specific "Sign Up" button
            signUpButton.click();

          }

          if (teacherName) {
            teacherName.focus();
            teacherName.value = 'Osgood';
          } else {
            console.error('Could not find the text field with name "data[teacher1]"');
          }


          // Listen for messages from popup.js
          chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
            if (request.action === 'processStudentID') {
              // Access student ID from request.studentID and process it
              console.log("Received student ID:", request.studentID);
              // You'll need to add your logic here to use the received studentID


			  // Example: Assuming the input field for student ID has the ID 'studentIDInput'
              const studentIDInput = document.getElementById('studentIDInput');
              if (studentIDInput) {
                studentIDInput.value = request.studentID;
                console.log("Student ID filled in the input field.");
              } else {
                console.error('Could not find the student ID input field.');
              }
            }
            }
          });
        }
      },
    });
  });
}

document.getElementById('openNextSignUpButton').addEventListener('click', injectTheScript);


// Get the live reference to the text box so we can call it later.
const studentIDBoxInput = document.getElementById('studentIDBoxInput');

// Add event listener so that we can tell when the submitIDButton is clicked.
document.getElementById('submitIDButton').addEventListener('click', () => {
  const barcodeValue = studentIDBoxInput.value;

  // Send message to content script
  chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
    chrome.tabs.sendMessage(tabs[0].id, { action: 'processStudentID', studentID: barcodeValue });
  });
});


		chrome.scripting.executeScript({
			target: {tabId: tabs[0].id}, files: ['content_script.js']
			})
	})
}

document.getElementById('openSignUpButton_fromPopup').addEventListener('click', injectTheScript);


// Get the live reference to the text box so we can call it later.
const studentIDBoxInput = document.getElementById('studentIDBoxInput');



// Add event listener so that we can tell when the submitIDButton is clicked.
document.getElementById('submitIDButton').addEventListener('click', () => {
const barcodeValue = studentIDBoxInput.value;


// Send message to content script
chrome.tabs.query({active: true, currentWindow: true}, tabs => {
chrome.tabs.sendMessage(tabs[0].id, {barcode: barcodeValue});

});

});

*/